<snippet>
	<content><![CDATA[
class Trie{
public:
    bool isLeaf;
    Trie* chars[26];
    Trie(){
        this->isLeaf=false;
        for(int i=0;i<26;i++){
            this->chars[i]=nullptr;
        }
    }
    void insert(string);
    bool deletion(Trie*&,string);
    bool search(string);
    bool haveChildren(Trie const*);
    void display(Trie*,char[],int);

};
void Trie::insert(string s)
{
    Trie* cur = this;
    for (int i = 0; i < s.length(); i++)
    {
        if (cur->chars[s[i]-'a'] == nullptr) {
            cur->chars[s[i]-'a'] = new Trie();
        }
        cur = cur->chars[s[i]-'a'];
    }
    cur->isLeaf = true;
}
bool Trie::search(string key)
{
    if (this == nullptr) {
        return false;
    }

    Trie* curr = this;
    for (int i = 0; i < key.length(); i++)
    {
        curr = curr->chars[key[i]-'a'];
        if (curr == nullptr) {
            return false;
        }
    }
    return curr->isLeaf;
}
bool Trie::haveChildren(Trie const* curr)
{
    for (int i = 0; i < 26; i++)
    {
        if (curr->chars[i]) {
            return true;   
        }
    }

    return false;
}
void Trie::display(Trie* curr,char str[],int level){

    if(curr->isLeaf){
        str[level]='\0';
        cout<<str;nl
    }
    for(int i=0;i<26;i++){
        if(curr->chars[i]){
            str[level]=i+'a';
            display(curr->chars[i],str,level+1);
        }
    }
}
bool Trie::deletion(Trie*& curr, string key)
{
    if (curr == nullptr) {
        return false;
    }

    if (key.length())
    {

        if (curr != nullptr &&
            curr->chars[key[0]-'a'] != nullptr &&
            deletion(curr->chars[key[0]-'a'], key.substr(1)) &&
            curr->isLeaf == false)
        {
            if (!haveChildren(curr))
            {
                delete curr;
                curr = nullptr;
                return true;
            }
            else {
                return false;
            }
        }
    }

    if (key.length() == 0 && curr->isLeaf)
    {
        if (!haveChildren(curr))
        {
            delete curr;
            curr = nullptr;
            return true;
        }
        else {
            curr->isLeaf = false;

            return false;
        }
    }

    return false;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>trie</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
