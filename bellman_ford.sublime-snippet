<snippet>
	<content><![CDATA[
struct edge
{
    int a, b, cost;
};
int n,m,v;// n is vertices, m is edges,v is source vertex
vector<edge> e;
const int INF=imax;
void bellman_ford()
{
    vector<int> d(n,INF);
    d[v] = 0;
    vector<int> p (n - 1);
    int x;
    for (int i=0; i<n; ++i)
    {
        x = -1;
        for (int j=0; j<m; ++j)
            if (d[e[j].a] < INF)
                if (d[e[j].b] > d[e[j].a] + e[j].cost)
                {
                    d[e[j].b] = max (-INF, d[e[j].a] + e[j].cost);
                    p[e[j].b] = e[j].a;
                    x = e[j].b;
                }
    }

    if (x == -1){
        // x is equal to -1 when there is no negative cycle

    }
    else
    {
        //Here is a negative cycle

        // int y = x;
        // for (int i=0; i<n; ++i){
        //     y = p[y];
        // }

        // vector<int> path;
        // for (int cur=y; ; cur=p[cur])
        // {
        //     path.push_back (cur);
        //     if (cur == y && path.size() > 1){
        //         break;
        //     }
        // }
        // reverse (path.begin(), path.end());

        // cout << "Negative cycle: ";
        // for (size_t i=0; i<path.size(); ++i){
        //     cout << path[i] << ' ';
        // }
    }
} 
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>bellmanford</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
