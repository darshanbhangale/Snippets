<snippet>
	<content><![CDATA[
//2019B4A80800G
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef vector<ll>  vi;
typedef set<ll> si;
const int imax=INT_MAX;
const int imin=INT_MIN;
const long long int llmax=LLONG_MAX;
const long long int llmin=LLONG_MIN;
int gttccc=-1;
#define pb push_back
#define F_OR(i, a, b, s) for (ll i=(a); (s)>0?i<(b):i>(b); i+=(s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1)
#define rep(...) F_ORC(__VA_ARGS__)(__VA_ARGS__)
#define nl cout<<"\n";
#define cnl cerr<<"\n";
#define mp make_pair
#define all(x) (x).begin(),(x).end() 
#define sall(x) sort((x).begin(),(x).end());
#define rall(x) sort((x).rbegin(),(x).rend());
#define meme(x, y) memset(x, y, sizeof(x))
#define each(a,x) for (auto& a: x)
#define ff first
#define ss second
#define yes cout<<"YES\n";
#define no cout<<"NO\n";
#define tcT template<typename T
#define tcTU template<typename T, typename U
#define maxa(a,n) *max_element(a,a+n)
#define mina(a,n) *min_element(a,a+n)
#define maxv(v) *max_element(v.begin(), v.end())
#define minv(v) *min_element(v.begin(), v.end())
# define gout() if(gttccc==-1){gttccc=ttt+1;};cout<<"Case #"<<gttccc-ttt<<": ";
#ifdef LOCAL
#include "debug.h"
#else
#define deb(...) 
#endif
template<typename... TT>
void read(TT&... args){
    ((cin>>args),...);
}
template<typename... TT>
void write(TT&&... args){
    ((cout<<args<<" "),...);
}
tcT> T div_rounded_up(T a, T b) { return a/b+((a^b)>0&&a%b); }
tcT> T div_rounded_down(T a, T b) { return a/b-((a^b)<0&&a%b); }
tcT> bool getBIT(T mask,int k){
    return ((mask>>k)&1);
}
tcT> void setBIT(T& mask,int k){
    mask=(mask|(1<<(k-1)));
    return;
}
tcT> istream& operator>>(istream& cin, vector<T> &v) {
    rep(i,0,v.size()-1){cin>>v[i];}
    return cin >> v[v.size()-1];
}
tcTU> istream& operator>>(istream& cin, pair<T, U> &p) {
    cin >> p.first;
    return cin >> p.second;
}
tcT> bool operator+=(vector<T> &v,T elem){
    v.pb(elem);
    return true;
}
tcT> pair<T,T> operator++(vector<vector<T>> &adj){
    T p,q;cin>>p>>q;
    p--;q--;
    adj[p].pb(q);
   adj[q].pb(p);
   return {p,q};
}
bool operator<(string a,string b){
    return lexicographical_compare(a.begin(),a.end(),b.begin(),b.end());
}
bool operator>(string a,string b){
    return lexicographical_compare(b.begin(),b.end(),a.begin(),a.end());
}
bool operator<=(string a,string b){
    return (lexicographical_compare(a.begin(),a.end(),b.begin(),b.end()) || (a==b));
}
bool operator>=(string a,string b){
    return (lexicographical_compare(b.begin(),b.end(),a.begin(),a.end()) || (a==b));
}
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
tcT> using my_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
tcT> using my_multi_set=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;


int main()
{
ios_base::sync_with_stdio(0);
cin.tie(0);cout.tie(0);
int ttt;
cin>>ttt;
while(ttt--){

$0	









































	}

return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>www</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
