<snippet>
	<content><![CDATA[
//2019B4A80800G
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef vector<ll>  vi;
typedef set<ll> si;
const int imax=INT_MAX;
const int imin=INT_MIN;
const long long int llmax=LLONG_MAX;
const long long int llmin=LLONG_MIN;
#define pb emplace_back
#define F_OR(i, a, b, s) for (int i=(a); (s)>0?i<(b):i>(b); i+=(s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1)
#define rep(...) F_ORC(__VA_ARGS__)(__VA_ARGS__)
#define nl cout<<"\n";
#define cnl cerr<<"\n";
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sall(x) sort((x).begin(),(x).end());
#define rall(x) sort((x).rbegin(),(x).rend()); 
#define fill(x, y) memset(x, y, sizeof(x))
#define each(a,x) for (auto& a: x)
#define ff first
#define ss second
#define yes cout<<"YES\n";
#define no cout<<"NO\n";
#define tcT template<typename T
#define tcTU template<typename T, typename U
#define everyone(a,dtype,op) calc_all_val(a, [](dtype t1, dtype t2) {return t1 op t2; });
#define inp(n,a) ll n;cin>>n;vector<ll> a(n);rep(i,0,n){cin>>a[i];}
#define inps(n,s) ll n;cin>>n;string s;cin>>s;
#define maxa(a,n) *max_element(a,a+n)
#define mina(a,n) *min_element(a,a+n)
#define maxv(v) *max_element(v.begin(), v.end())
#define minv(v) *min_element(v.begin(), v.end())
template<typename... TT>
void read(TT&... args){
    ((cin>>args),...);
}
template<typename... TT>
void write(TT&&... args){
    ((cout<<args<<" "),...);
}
void dbg_out() {cerr<<"}\n";}
template<typename Head,typename... Tail> 
void dbg_out(Head H,Tail... T) {cerr<<H;if(sizeof...(Tail))cerr<<", ";dbg_out(T...);}
#define deb(...) cerr<<"{"<<#__VA_ARGS__<<"} = {",dbg_out(__VA_ARGS__);
namespace binary_search_kar_jaldi{
    tcTU> T first_True(T lo,T hi, U F){
        hi++;assert(lo <=hi);
        while(lo<hi){
            T mid= lo+(hi-lo)/2;
            F(mid) ? hi=mid :lo =mid+1;
        }
        return lo;
    }
    tcTU> T last_True(T lo,T hi, U F){
        lo--;assert(lo<=hi);
        while(lo<hi){
            T mid=lo+(hi-lo+1)/2;
            F(mid) ? lo=mid : hi=mid-1;
        }
        return lo;
    }
}
tcT> T div_rounded_up(T a, T b) { return a/b+((a^b)>0&&a%b); }
tcT> T div_rounded_down(T a, T b) { return a/b-((a^b)<0&&a%b); }
tcTU> T calc_all_val(vector<T> inp, U f)
{
    ll n=inp.size();
    T res=inp[0];
    assert(n>0);
    rep(i,1,n){
        res=f(inp[i],res);
    }
    return res;
}
tcT> bool kBIT(T num,int k){
    return ((num>>k)&1);
}
tcTU> ostream& operator<<(ostream &cout, pair<T, U> const &p) { return cout <<"("<<p.ff<<", "<<p.ss<<")"; }
tcT> ostream& operator<<(ostream &cout, vector<T> const &v) {
    cout<<"[";
     for(int i = 0; i < v.size(); i++) {if (i) cout << ", "; cout << v[i];} return cout << "]";
}
tcTU> ostream& operator<<(ostream &cout,map<T,U> const &m){
    for(auto x:m){
        cout<<x.ff<<"-> "<<x.ss<<"\n";
    }
    return cout<<"";
}
tcT> istream& operator>>(istream& cin, vector<T> &v) {
    rep(i,0,v.size()-1){cin>>v[i];}
    return cin >> v[v.size()-1];
}
tcTU> istream& operator>>(istream& cin, pair<T, U> &p) {
    cin >> p.first;
    return cin >> p.second;
}
tcT> bool operator+=(vector<T> &v,T elem){
    v.pb(elem);
    return true;
}
tcT> pair<T,T> operator++(vector<vector<T>> &adj){
    T p,q;cin>>p>>q;
    adj[p].pb(q);
   adj[q].pb(p);
   return {p,q};
}

int main()
{
ios_base::sync_with_stdio(0);
cin.tie(0);cout.tie(0);

$0


























return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>qqq</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
